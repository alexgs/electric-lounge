// Copyright 2021 Phillip Gates-Shannon. All rights reserved. Licensed under
// the Open Software License version 3.0.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("API_DATABASE_URL")
}

// --- APPLICATION DATA ---

model Playlist {
  id          Int                @id @default(autoincrement())
  spotifyId   String             @unique
  description String?
  name        String
  snapshots   PlaylistSnapshot[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now()) @updatedAt
}

model PlaylistSnapshot {
  id          Int             @id @default(autoincrement())
  playlist    Playlist?       @relation(fields: [playlistId], references: [id])
  playlistId  Int?
  description String?
  name        String
  tracks      PlaylistTrack[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
}

model PlaylistTrack {
  id         Int               @id @default(autoincrement())
  addedAt    DateTime
  track      Track             @relation(fields: [trackId], references: [id])
  trackId    Int
  snapshot   PlaylistSnapshot? @relation(fields: [snapshotId], references: [id])
  snapshotId Int?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now()) @updatedAt
}

model Track {
  id            Int             @id @default(autoincrement())
  spotifyId     String          @unique
  name          String
  PlaylistTrack PlaylistTrack[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
}

// --- NEXT AUTH MODELS ---
// DO NOT EDIT! "Creating tables and columns using the provided SQL is currently
// recommended instead as SQL schemas automatically generated by Prisma may
// differ from the recommended schemas." But you can't just use their SQL
// commands and then introspect the database; you have to use their Prisma
// schema, too. :face_with_rolling_eyes:
//   - https://next-auth.js.org/schemas/adapters#prisma-adapter
//   - https://next-auth.js.org/schemas/postgres

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}
